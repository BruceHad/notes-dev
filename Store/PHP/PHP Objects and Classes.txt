## Classes and Objects

A class is basically a template that is used to generate an Object (an instance of the class).

    class ShopProduct {
		// Class Body
	}

Objects are constructed from Classes. 

	$product = new ShopProduct();

Classes can have properties (variables) and methods (functions). These things tend to have a scope (public or private) but default to public.

	class ShopProduct {
		public $title = "The Title";

		public function printTheTitle() {
			print $this->title;
		}
	}

An object's properties and methods can be accessed using the arrow notation (similar to dot notation in python).

	$product = new ShopProduct();
	print($product->title);
	# The Title
	$product->printTheTitle();
	# The Title

(Note the lack of the $ sign preceding the 'title' property.)

The code above introduced the $this keyword, which basically refers to the current object.

You don't have to declare all properties in the class definition, you can add new ones them at runtime. You also don't have to declare the values of the properties in the class definition, but if you do, you can override them. 

	$product->title = "A new title";

But this is probably all considered bad practice. Better to have a method that is designed to maintain the properties, so you can build some validation into that process.

One special case is the contruct method, which is called automatically when a new object is created.

	function __contruct() {
		// Contructor code.
	}

## Hints and Type Checking

PHP is loosely typed, which is flexible but can cause problems tracking down bugs where the wrong/unexpected data type has been supplied.

Therefore type checking is important whenever data is being passed. For primitive you can use php function like is_int() or is_bool() to check the type, and die, for example, if the wrong type is detected.

Objects themselves have a primitive data type (Object), but the class is basically a type definition, so it also belongs to that type. Objects can be passed as arguments the same as other primitives. If you want to confirm the type of the object then you can use hinting, by indicating the class name of the object being passed as an argument.

    function printObject(ShopProduct $product) {
        var_dump($product);
    }

So if an object of a different Class is passed to the function as an argument, a fatal error occurs.

Unfortunately type hinting cannot be used for primitives.

## Inheritance

Classes define the type of the object instantiated from them. But types can also define the family of the class through inheritance. This is where one Class is derived from a parent Class, inheriting some of it's features. Generally a child class will add/replace functionality from its parent, known as extending the parent.

    class ChildClass extends BaseClass {
    
    }

You can readily identify patterns where inheritance can be used if you have a class where parts (methods or properties) don't seem to belong. In these cases, the parts can be split into a new Class, extending from the original class.

### Overriding Parent Methods

The constructor of a parent class is not called automatically by the child. That becomes the responsibility of the child class.

    public function __contruct($title) {
        parent::__contruct($title);
	}

This uses the Paamayim Nekudotayim (double colon ::) which replaces the arrow (->) in the scope of Classes as opposed to Objects.

A child class will often just amend the parent slighly, so rather than replacing entire methods, you can often use the parent keyword as above to call the parent's method and make a small change to it.

    public function printDetails(){
        parent::printTheTitle();
        print($this->theYear);
    }

### Access (Public, Private or Protected)

There are three levels of access that can be granted for methods and properties -- Public, Private or Protected. 

Public - The default. This means any other object can access it.
Private - This means it can only be accessed from within the same object.
Protected - This means it can only be accessed from within the same object or from a subclass of the object.

It's good practice to make everything private and reveal them only when necessary.

### Accessor Methods

Even when other classes need access to properties, it can be a good idea to keep them private and control the access using Accessor (Getter and Setter) methods.

## Static Properties and Methods

Classes are not just templates for building objects, sometime the classes themselves are used in the program. There are methods and Properties known as 'static' that can be accessed by all instances of the class. I think of these like globals, since if the static properties change, it changes for all objects.

    class StaticExample {
        static public $aNum = 0;

        static public function sayHello() {
            print "Hello";
        }
    }

Since these are only used in the context of a class, the double colon is used.

    StaticExample::$aNumb;
    StaticExample::sayHello();

Static methods appear to be useful in creating factory type methods. This means you can create a static method that generates and instance of its own subclass (or class?). That method can then be called without having to instantiate any new objects.

## Constants

Constants are properties/variables that don't change. They are declared with the const keyword.

    class ShopProduct {
        const AVAILABLE = 0;
        ...
    }

Constants can only contain primitives.

Like static properties, constants are accessed in the class not the instance. No symbol or dollar sign is required.

    print ShopProduct::AVAILABLE;

## Abstract Classes

Abstract classes cannot themselves be instantiated. Instead, they define the interfaces for any class that extends them.

    abstract class ShopProductWriter {
        protected $products = array();

        public function addProduct(ShopProduct $shopProduct) {
            	$this->products[] = $shopProduct;
    	}
		abstract public function write();
    }

As in the above example, an abstract class will often contain an abstract method, that has no code. It's just there to guarantee that child classes implement this method.

## Interfaces

While Abstract class can partially implement methods, Interfaces can only define methods. That is, a method can be declared but not implemented.

Any class that implements an interface, will have to figure out how to implement all the methods declared in the interface.

    interface Chargeable {
        public function getPrice();    
    }

    class ShopProduct implements Chargeable {
        ...
        public function getPrice(){
            return ($this->price - $this->discount);
        }
        ...
    }




## Conventions:

* Class names appear to be capitalised (e.g. ClassName)
* Objects appear to be lower case (e.g. object = new ClassName();)
* Methods and Properties appear to be camelCased (e.g. methodName)
* Constant properties seem to be UPPERCASE


-------------------

* [Php Objects, Patterns and Practice](http://books.google.co.uk/books?id=KZoAq_mbhXAC)