# Javascript

22/03/12

https://developer.mozilla.org/en/JavaScript/A_re-introduction_to_JavaScript

Javascript is an object-oriented, dynamic scripting language.

The main Javascript _types_ include: 

* Number
* String
* Object
 ** Function
 ** Array
 ** Date
 ** Reg Ex
* Null
* Undefined

## Numbers

There are actually no integers in Javascript, all numbers are floating point doubles.

If you want an integer you can use:

	parseInt("123", 10)
	>>> 123

	parseInt("101", 2)
	>>> 5

There are built in Math functions that help with numeric operations. e.g:

	Math.PI
	Math.sin(3.5)

A special value "NaN" is returned if a string doesn't evaluate to a number. And you can use the isNan() to determine if a string is not a number.

## Strings

Strings are sequences of unicode characters. 

Strings have a length property.

	"hello".length
	>>> 5

And they have various methods such as concat, match, toUpperCase that can be applied to them.

## Booleans

_true_ and _false_ are special keywords. Various other values evaluate to true or false as well.

* False - false, 0, "", NaN, Undefined, Null
* True - everything else

You can convert to booleans explicitely but javascript will do it for you in most circumstances, where it is expected, like in an if statement.

## Variables

New variables are decalared using the var keyword.

	var a;
	var name = "Bruce";

The type is defined by the data. Empty variable remain undefined.

Variables do not have bounded scope unless declared in a function.

## Operators

The usual operators are available: + - * / % += == etc

The plus + operator is also used to concatenate strings. So be careful when working with strings and numbers.

## Control Structures

There are the usual control structures. Here are some examples for reference.

If Statements:

	if() {}
	else if {}
	else {}

While Loop:

	while(){}

Do While Loop:

	do {}
	while ()

For statement:
	
	for (var i=0; i <5; i++) {}	

In your conditions you can use and & and or | statements. Doubling these (&&, ||) is a useful shorthand.

The Switch/Case statement:
	
	switch(action) {  
		case 'draw':  
	        	drawit();  
	        	break;  
		case 'eat':  
		        eatit();  
		        break;  
		default:  
   			donothing();  
	} 

You generally need to enter a break statement at the end of each case, otherwise the execution will 'fall through' to the next level (in which case why aren't you using and if statement).

## Arrays

Arrays are similar to Objects but have are indexed, rather than named.

	var ar = []
	var ar = ["Dog","Cat"]

Similar to Strings, arrays have a property called length. 
	
	ar.length
	>>2

Note: The index isn't always ordered in a natural sequence. And length doesn't count the number of items in the array, but returns the last index +1. Don't know why.

## Associative Arrays

Javascript doesn't have dictionaries. But you can use objects instead. e.g. Using literal notation, you can set something up like this.

    dict = {A:"Hello", B:"Goodbye", C: "Gone"};
    dict.B
    >>Goodbye

## Functions

Functions can be declared as follows:

	function add(x,y) {
		var total = x + y;
		return var;
	}

The function statement

    function membername(...) {...}

is shorthand for

    var membername = function membername(...) {...};

Strangely the parameters are optional, and can otherwise be accessed from the special _arguments_ object.

Javascript also allows for anonymous functions, which are apparently quite useful.

## Custom Objects

Javascript doesn't define Classes. Instead, you can use functions.

Functions can contain data and other functions which are equivalent to methods. For example:

	function makePerson(first, last) {
	    return {
	        first: first,
	        last: last,
	        fullName: function() {
	            return this.first + ' ' + this.last;
	        },
	        fullNameReversed: function() {
	            return this.last + ', ' + this.first;
	        }
	    }
	}
	> s = makePerson("Simon", "Willison")
	> s.fullName()
	Simon Willison
	> s.fullNameReversed()
	Willison, Simon

_this_ is a special keyword. When used inside an object it refers to the current object.

## Objects

Objects are core data structures, equivalent to Dictionaries and Associative Arrays. You can create and object and populate it with properties using the literal notation and curly braces {}.

    var obj = {}
	obj.name = "Bruce"

The name property is added using dot notation. You can also use brackets.

	obj["name"] = "Bruce"

An advantage of the bracket notation is that you can use variable and stuff.

Or you can use this extended syntax, which also allows you to create objects:

	var obj = {
		name: "Bruce",
		address:{
			street:"Stenhouse",
			city:"Edinburgh"
		}

	}

The above way of creating objects is known as literal notation. 

Alternatively we can use a construct objects using the new Object() keywords.

    var obj = new Object();

In this case we are using the built in Object(). We can also create new objects from constructors (template objects similar to classes). See below.

Objects can also have Methods (which work the same as functions but are associated with an object). A function/method can be associated with an object in the same way as a property, using dot notation.

    bob.setAge = function (newAge){
      bob.age = newAge;
    };

And advantage that methods have over functions is that they can use the object properties for calculations, where functions are limitted to their input parameters.

In Javascript (like Python I think) the 'this' keyword is used to refer to the current object, so can be used within a method.

    print(this.age);

Methods can also be added to objects using the literal notation:

    var james = {
        job: "programmer",
        married: false,
        speak: function(feeling) {
            console.log("Hello, I am feeling "+feeling);
        }
    };

A 'Contructor' object can be created instead of Classes(?) The constructor function defines the objects methods and properties, allowing you to use the 'new' keyword. e.g:

    function Rectangle(length, width) {
      this.length = length;
      this.width = width;
      this.calcArea = function() {
          return this.length * this.width;
      };
      // put our perimeter function here!
      this.calcPerimeter = function() {
          return this.length * 4;
      }
    }

A constructor is just a normal function, that happens to be called by the new keyword.


Properties and methods can be set up in the class contructor, and can be private or public.

    function Person(first,last,age) {
       this.firstname = first;
       this.lastname = last;
       this.age = age;
       var bankBalance = 7500;
    }

Variable are private (only available within the scope of where they are created). So in this example, bankBalance is a private property, and can't be accessed from outside the object. The this keyword is used for public properties/methods. 

Private functions can also be set up.

    function Person(first,last,age) {
       this.firstname = first;
       this.lastname = last;
       this.age = age;
       var bankBalance = 7500;
      
       this.getBalance = function() { // Public Method
          // your code should return the bankBalance
          return bankBalance;
       };
    
       var returnBalance2 = function() { // Private Method
          return bankBalance;
       };
    }

In this example, returnBalance2 is private.

## Javascript Callbacks
07/03/2014

Feature of asynchronous programming.

Regular functions: Functions are objects. Function objects that are created with the Function constructor. A function object contains a string, which is the javascript code for the function. (The distinction between code and data is blurred here).

    var my_func = new Function (){};

As a result of this is that you can pass code to other functions, similar to how you pass variables and objects as arguments.

    // define our function with the callback argument
    function some_function(arg1, arg2, callback) {
        // this generates a random number between
        // arg1 and arg2
        var my_number = Math.ceil(Math.random() *
            (arg1 - arg2) + arg2);
        // then we're done, so we'll call the callback and
        // pass our result
        callback(my_number);
    }
    // call the function
    some_function(5, 15, function(num) {
        // this anonymous function will run when the
        // callback is called
        console.log("callback called! " + num);
    });

Traditional functions take input in the form of an argument and return a result. Javascript gives an alternative option. Rather than wait for the function to finish and return a result, callbacks let us do things asynchronously. Not sure how!

    function some_function2(url, callback) {
        var httpRequest; // create our XMLHttpRequest object
        if (window.XMLHttpRequest) {
            httpRequest = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            // Internet Explorer is stupid
            httpRequest = new
                ActiveXObject("Microsoft.XMLHTTP");
        }

        httpRequest.onreadystatechange = function() {
            // inline function to check the status
            // of our request
            // this is called on every state change
            if (httpRequest.readyState === 4 &&
                    httpRequest.status === 200) {
                callback.call(httpRequest.responseXML);
                // call the callback function
            }
        };
        httpRequest.open('GET', url);
        httpRequest.send();
    }
    // call the function
    some_function2("text.xml", function() {
        console.log(this);
    });
    console.log("this will run before the above callback");

In this example it creates a httpRequest for an xml file. There is no return function. It starts and calls the callback when it is finished. 

Note, the callback uses the call() function. It's not strictly necessary. call() is used when you want to control the scope that will be used in the function called.

[1]: http://recurial.com/programming/understanding-callback-functions-in-javascript/
[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
[3]: http://stackoverflow.com/questions/9001830/the-reason-to-use-js-call-method

## Class Inheritance

https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain

Javascript doesn't have traditional class model for OO. It does support extending and inheritance via the prototype chain.

Only functional objects, those Contructor objects that take the form given below, have a predefined prototype object that you can access. If you create a new object from a constructor, it has a hidden [[prototype]] object that can't be accessed directly.

    function FuncObject(){
    ...
    }
    myObject = new FuncObject();
    // FuncObject.prototype
    // myObject.[[prototype]]

You can access the prototype using the dot notation.

    FuncObject.prototype.name = "Functional Object Name";


## Error Handling

When a function cannot proceed normally, what we would like to do is just stop what we are doing and immediately jump back to a place that knows how to handle the problem. This is what exception handling does.

### Try/Catch 
When a program runs into a problem it raises an exception (which is simply a value) and jumps out of the current function and it's callers, all the way back to the first call that started the current execution, unless _handled_.

_Exception Handling_ 'catches' the exeption and 'does something'.

  function promptDirection(question) {
    var result = prompt(question, "");
    if (result.toLowerCase() == "left") return "L";
    if (result.toLowerCase)( == "right") return "R";
    throw new Error("Invalid direction: " + result);
  }

  function look() {
    if (promptDirection("Which way?") == "L")
      return "a house";
    else
      return "two angry bears";
  }

  try {
    console.log("You see", look());
  }
  catch (error) {
    console.log("Something went wrong: " + error);
  }
  finally {
    context = oldContext;
  }

The _throw_ keyword raises the exception. The _try_ block runs the code. If an exception is raised during the processing of the try block, the _catch_ block is executed.

An additional feature is the _finally_ block. The code in finally will be executed regardless of the results of the try block. Even if you return in the try block, finally will still be executed.

JS doesn't directly provide a way of selectively handling errors, so we have to work around that ourselves.

Note the _instanceof_ operator checks if an object is an instance of a given constructor (in it's prototype chain).

  function C(){}
  a = new C()
  a instanceof C // true
  a instanceof Object// true

This gives us a way of checking that any error thrown is of a specific type.

  function InputError(message) {
    this.message = message;
    this.stack = (new Error()).stack;
  }
  InputError.prototype = Object.create(Error.prototype);
  InputError.prototype.name = "InputError";

We've now created our own error type. 

  function promptDirection(question){
    var result = prompt(question, "");
    if(result.toLowerCase() == "left") return "L";
    if(result.toLowerCase() == "right") return "R";
    throw new InputError("Invalid direction: " + result);
  }

  for(;;){ // loop
    try{
      var dir = promptDirection("Where?"; // typo deliberate
      console.log("You chose ", dir);
      break;
    }
    catch(error){
      if(error instanceof InputError)
        console.log("Not a valid direction. Try again"
      else
        throw e;
    }
  }

This creates a new type of error derived from the Error prototype.

Now we can use the error in our application and use instanceof to determine if it's an input error and handle it accordingly. If it isn't, the error can be re-thrown.

  function promptDirection(question) {
    var result = prompt(question, "");
    if (result.toLowerCase() == "left") return "L";
    if (result.toLowerCase() == "right") return "R";
    throw new InputError("Invalid direction: " + result);
  }
  for (;;) {
    try {
      var dir = promptDirection("Where?");
      console.log("You chose ", dir);
      break;
    } catch (e) {
      if (e instanceof InputError)
        console.log("Not a valid direction. Try again.");
      else
        throw e;
    }
  }

### Asynchronous Error Handling/Callbacks

http://ruben.verborgh.org/blog/2012/12/31/asynchronous-error-handling-in-javascript/

Asynchronous functions cannot immediately calcualte their return value. Try/catch blocks won't work, as the block may have already been executed before the (asynchronous) function has thrown any error.

Generally the error will be passed back through the callback function.This could be an extra _error argument_.

    function postLetter(letter, address, callback){
        if(canSendTo(address))
            letter.sendTo(address, function(){
                callback(null, letter, getTrackingCode());
                });
            else
                callback("Cannot reach address" + address);
    }

Not the first argument is the _error argument_. If it is null, no error has occured.

    postLetter(myLetter, myAddress, function(error, trackingCode){
        if(error)
            return console.error("Letter not sent: " + error);
        console.log("Letter sent with code " + trackingCode);
        })

(The article has more on _promises_ and error handling. should read later)
