# Making HTML Templates
# Notes

31/07/2012

Templating engine is used to seperate design from business logic. E.g. A Wordpress CMS has a bunch of template files that control the layout of various pages. These pages mix HTML and PHP code that, in turn, produces the HTML code that is sent to the browser.

However it's possible to write the templates in pure HTML and use custom tags that act as placeholders for code as the example at the bottom shows. But still not sure how I'm planning on doing this. 

First I need to start from the top an work down through the hierarchy.

_The Hierarchy_



## Tutorial - How to make a simple HTML template engine in PHP

A simple example of a template file name user_profile.tpl:

    <h1>[@username] profile</h1>    
    <img src="http://www.broculos.net/en/%5B%40photoURL%5D" class="photo" alt="[@name]" />  
    <b>Name:</b> [@name]<br />  
    <b>Age:</b> [@age]<br />  
    <b>Location:</b> [@location]<br />  

## The Code

The code for the templating engine called template.class.php.

    class Template {
        protected $file;
        protected $values = array();
        
        public function __construct($file) {
            $this->file = $file;
        }

        public function set($key, $value) {
            $this->values[$key] = $value;
        }  

        public function output() {
            if (!file_exists($this->file)) {
                return "Error loading template file ($this->file).<br />";
            }
            $output = file_get_contents($this->file);
          
            foreach ($this->values as $key => $value) {
                $tagToReplace = "[@$key]";
                $output = str_replace($tagToReplace, $value, $output);
            }  
            return $output;
        }
    }

We have two main methods here. 

* set() sets the key value pairs in the $values array.
* output() reads through the template file and replaces any instances of the tag with the value found in the array.

## Layout Template

The first template code above only outputs a chunk of code, not the full page. We therefore need a template page that will include all the <head>, <body> tags etc.

For example: index_template.tpl:

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html>
    <head>
    <title>[@title]</title>
    <link rel="stylesheet" type="text/css" href="http://www.broculos.net/en/stylesheet.css" />
    </head>
    <body>
        <div id="header">
            <a href="http://www.broculos.net"><img src="http://www.broculos.net/en/broculo_small.gif" class="logo" alt="Broculos.net" /></a>
            <h1><a href="http://www.broculos.net">Broculos.net</a></h1>
            <h2>Simple PHP Template Engine</h2>
        </div> 
        <div id="menu">
            <h1>Navigation</h1>
            <ul>
                <li><a href="http://www.broculos.net/en/user_profile.php">User profile</a> - example of a user profile page</li>
                <li><a href="http://www.broculos.net/en/list_users.php">List users</a> - example table with listing of users</li>
            </ul>
        </div>
        <div id="content">
            [@content]
        </div>
        <div id="footer">
            Example usage of a simple PHP Template Engine.<br />
            Search <a href="http://www.broculos.net">Broculos.net</a> for more tutorials.
        </div>
    </body>
    </html>

## Output File

Now we can create our output file which will display the results. user_profile.php

    include("template.class.php");
      
    $profile = new Template("user_profile.tpl");
    $profile->set("username", "monk3y");
    $profile->set("photoURL", "photo.jpg");
    $profile->set("name", "Monkey man");
    $profile->set("age", "23");
    $profile->set("location", "Portugal");
      
    $layout = new Template("layout.tpl");
    $layout->set("title", "User profile");
    $layout->set("content", $profile->output());

    echo $layout->output();

This sets up the content data, generates the user_profile from the equivalent template, then generates a full template and inserts the user_profile into it.

## Another Example

This example shows a list of registered users. It splits the code into a couple of template: 1. For the main content. 2. Another for the information pertaining to each user.

The main template is called list_users.tpl

    <h1>Users</h1>
    <table>
        <thead>
            <tr>
                <th>Username</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            [@users]
        </tbody>
    </table>

And list_users_row.tpl

    <tr>
        <td>[@username]</td>
        <td>[@location]</td>
    </tr>

In the template class we need to add a new function that will merge multiple templates:

    static public function merge($templates, $separator = "n") {
        $output = "";
      
        foreach ($templates as $template) {
            $content = (get_class($template) !== "Template")
                ? "Error, incorrect type - expected Template."
                : $template->output();
            $output .= $content . $separator;
        }  
        return $output;
    }

And now we can create the list_users.php output file.

    include("template.class.php");
      
    $users = array(
        array("username" => "monk3y", "location" => "Portugal")
        , array("username" => "Sailor", "location" => "Moon")
        , array("username" => "Treix!", "location" => "Caribbean Islands")
    );  
    foreach ($users as $user) {
        $row = new Template("list_users_row.tpl");
      
        foreach ($user as $key => $value) {
            $row->set($key, $value);
        }
        $usersTemplates[] = $row;
    }
    $usersContents = Template::merge($usersTemplates);
      
    $usersList  = new Template("list_users.tpl");
    $usersList->set("users", $usersContents);
      
    $layout = new Template("layout.tpl");
    $layout->set("title", "Users");
    $layout->set("content", $usersList->output());
      
    echo $layout->output();

------------------------
* [How to make a simple HTML template engine in PHP](http://www.broculos.net/en/article/how-make-simple-html-template-engine-php)